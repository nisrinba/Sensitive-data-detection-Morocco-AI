# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1--bgRhLOZrtSiTjhwT1zPu9B2UFUAc2O
"""

# -*- coding: utf-8 -*-
"""
Projet de Détection Automatique des Données Sensibles
"""

# ======================
# 1. IMPORT DES LIBRAIRIES
# ======================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, roc_curve
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline as ImbPipeline
from collections import Counter

# ======================
# 2. PRÉPARATION DES DONNÉES
# ======================
# Chargement et nettoyage (comme précédemment)
df = pd.read_csv('/content/healthcare_dataset.csv')
df = df.drop_duplicates()
df.columns = df.columns.str.lower().str.replace(' ', '_')

# Création de la cible
df['is_sensitive'] = np.where(
    (df['billing_amount'] > df['billing_amount'].quantile(0.75)) |
    (df['age'] > 65),
    1, 0
)

# Sélection des features (en excluant les colonnes textuelles problématiques)
features = ['age', 'gender', 'blood_type', 'admission_type', 'insurance_provider', 'room_number']
X = df[features]
y = df['is_sensitive']

# Encodage des variables catégorielles AVANT la séparation
X_encoded = pd.get_dummies(X, columns=['gender', 'blood_type', 'admission_type', 'insurance_provider'])

# Séparation train-test
X_train, X_test, y_train, y_test = train_test_split(
    X_encoded, y, test_size=0.3, stratify=y, random_state=42
)

# ======================
# 3. PIPELINE DE MODÉLISATION
# ======================
# Définition des préprocesseurs
numeric_features = ['age', 'room_number']
numeric_transformer = StandardScaler()

# Les catégorielles sont déjà encodées via get_dummies

# Modèles
models = {
    'Random Forest': RandomForestClassifier(
        n_estimators=100,
        max_depth=10,
        class_weight='balanced',
        random_state=42
    ),
    'SVM': SVC(
        C=1.0,
        kernel='rbf',
        class_weight='balanced',
        probability=True,
        random_state=42
    ),
    'Logistic Regression': LogisticRegression(
        penalty='l2',
        C=0.1,
        solver='liblinear',
        class_weight='balanced',
        random_state=42,
        max_iter=1000
    ),
    'XGBoost': XGBClassifier(
        n_estimators=100,
        max_depth=5,
        learning_rate=0.1,
        subsample=0.8,
        colsample_bytree=0.8,
        scale_pos_weight=sum(y == 0)/sum(y == 1),
        random_state=42,
        eval_metric='logloss'
    ),
    'Naive Bayes': GaussianNB()
}

# ======================
# 4. ENTRAÎNEMENT ET ÉVALUATION
# ======================
results = []
for name, model in models.items():
    print(f"\n=== {name} ===")

    # Création du pipeline avec SMOTE
    pipeline = ImbPipeline([
        ('scaler', StandardScaler()),
        ('smote', SMOTE(random_state=42)),
        ('classifier', model)
    ])

    # Entraînement
    pipeline.fit(X_train, y_train)

    # Prédiction
    y_pred = pipeline.predict(X_test)
    y_prob = pipeline.predict_proba(X_test)[:, 1]

    # Métriques
    metrics = {
        'Model': name,
        'Accuracy': accuracy_score(y_test, y_pred),
        'Precision': precision_score(y_test, y_pred),
        'Recall': recall_score(y_test, y_pred),
        'F1': f1_score(y_test, y_pred),
        'ROC AUC': roc_auc_score(y_test, y_prob)
    }
    results.append(metrics)

    print(classification_report(y_test, y_pred))

    # Matrice de confusion
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Matrice de Confusion - {name}')
    plt.show()

# ======================
# 5. ANALYSE DES RÉSULTATS
# ======================
results_df = pd.DataFrame(results)
print("\n=== RÉSULTATS FINAUX ===")
print(results_df.sort_values('F1', ascending=False))

# Visualisation
plt.figure(figsize=(12, 6))
results_df.set_index('Model').plot(kind='bar', rot=45)
plt.title('Comparaison des Performances des Modèles')
plt.ylabel('Score')
plt.tight_layout()
plt.show()


# 6. ANALYSE COMPLÉMENTAIRE
# ======================
# Feature Importance pour Random Forest
rf = models['Random Forest'].fit(X_train, y_train)
importances = pd.DataFrame({
    'Feature': X_train.columns,
    'Importance': rf.feature_importances_
}).sort_values('Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importances)
plt.title('Importance des Variables - Random Forest')
plt.show()

# Courbes ROC comparées
plt.figure(figsize=(10, 8))
for name, model in models.items():
    pipeline = ImbPipeline([
        ('scaler', StandardScaler()),
        ('smote', SMOTE(random_state=42)),
        ('classifier', model)
    ])
    pipeline.fit(X_train, y_train)
    y_prob = pipeline.predict_proba(X_test)[:, 1]
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc_score(y_test, y_prob):.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('Taux de Faux Positifs')
plt.ylabel('Taux de Vrais Positifs')
plt.title('Courbes ROC Comparées')
plt.legend()
plt.show()